{"version":3,"sources":["lib/helpers.js","components/Header.js","components/Scoreboard.js","components/Card.js","components/Cards.js","components/LoadingSpinner.js","components/ShuffleSpinner.js","App.js","reportWebVitals.js","index.js"],"names":["fetchData","url","a","fetch","mode","response","json","data","console","log","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","getRandomElements","num","arrayCopy","slice","Header","props","classes","className","Scoreboard","score","current","best","Card","item","onCardClick","itemNameTitleCased","name","toLowerCase","split","map","word","charAt","toUpperCase","substr","data-name","onClick","src","image","alt","Cards","items","cards","LoadingSpinner","ShuffleSpinner","App","useState","pickedPokemons","setPickedPokemons","selectedCards","setSelectedCards","isPickedPokemonsShuffling","setIsPickedPokemonsShuffling","parseInt","localStorage","getItem","setScore","undefined","isWinner","setIsWinner","resetState","prevScore","getCompletePokemonData","pokemonUrl","pokemonData","getPokemonsCompleteData","pokemonUrls","Promise","all","completePokemonsData","processPokemons","pokemons","pokemon","sprites","other","front_default","pickPokemons","incPokemonsData","incRandomPokemonsData","results","incRandomPokemonsUrl","incPokemonData","randomPokemons","processedPokemons","useEffect","Set","size","newScore","determineScoreOrIfLoser","bestScore","setItem","determineIfWinner","alert","bestScoreText","newGame","messageAndDetermineIfNewGame","e","cardName","target","dataset","prevSelectedCards","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4a72c57.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\n\nasync function fetchData(url) {\n\ttry {\n\t\tconst response = await fetch(url, { mode: 'cors' });\n\t\tconst data = await response.json();\n\t\treturn data;\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n}\n\n// https://stackoverflow.com/a/2450976\n// WARNING! this mutates the original array.\nfunction shuffle(array) {\n\tlet currentIndex = array.length;\n\tlet temporaryValue;\n\tlet randomIndex;\n\n\t// While there remain elements to shuffle...\n\twhile (0 !== currentIndex) {\n\t\t// Pick a remaining element...\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttemporaryValue = array[currentIndex];\n\t\tarray[currentIndex] = array[randomIndex];\n\t\tarray[randomIndex] = temporaryValue;\n\t}\n\n\treturn array;\n}\n\nfunction getRandomElements(array, num) {\n\tconst arrayCopy = [...array];\n\tshuffle(arrayCopy);\n\treturn arrayCopy.slice(0, num);\n}\n\nfunction titleCase(str) {\n\treturn str\n\t\t.toLowerCase()\n\t\t.split(' ')\n\t\t.map((word) => word.charAt(0).toUpperCase() + word.substr(1));\n}\n\nfunction hasDuplicates(array) {\n\treturn new Set(array).size !== array.length;\n}\n\nexport { fetchData, shuffle, getRandomElements, titleCase, hasDuplicates };\n","function Header(props) {\n\tconst { classes } = props;\n\treturn (\n\t\t<header className={`${classes} text-center`}>\n\t\t\t<h1>Memory Card</h1>\n\t\t\t<p className=\"h5\">Click on any card once</p>\n\t\t</header>\n\t);\n}\n\nexport default Header;\n","import '../css/Scoreboard.css';\n\nfunction Scoreboard(props) {\n\tconst { score } = props;\n\treturn (\n\t\t<div className=\"Scoreboard d-flex flex-column h5 px-4 mb-0 mx-auto\">\n\t\t\t<div>\n\t\t\t\t<p className=\"font-weight-bold\">Score:</p>\n\t\t\t\t<span>{score.current}</span>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<p className=\"font-weight-bold\">Best Score:</p>\n\t\t\t\t<span>{score.best}</span>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Scoreboard;\n","import { titleCase } from '../lib/helpers';\nimport '../css/Card.css';\n\nfunction Card(props) {\n\tconst { item, onCardClick } = props;\n\tconst itemNameTitleCased = titleCase(item.name);\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"Card card h-100 cursor-pointer\"\n\t\t\tdata-name={item.name}\n\t\t\tonClick={onCardClick}\n\t\t>\n\t\t\t<img src={item.image} className=\"card-img-top\" alt={itemNameTitleCased} />\n\t\t\t<div className=\"card-body d-flex justify-content-center align-items-end\">\n\t\t\t\t<p className=\"card-text\">{itemNameTitleCased}</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Card;\n","import Card from './Card';\n\nfunction Cards(props) {\n\tconst { items, onCardClick } = props;\n\n\tconst cards = items.map((item) => {\n\t\treturn (\n\t\t\t<div key={item.name} className=\"col mb-4\">\n\t\t\t\t<Card item={item} onCardClick={onCardClick} />\n\t\t\t</div>\n\t\t);\n\t});\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<div className=\"row row-cols-1 row-cols-sm-2 row-cols-md-4\">{cards}</div>\n\t\t</div>\n\t);\n}\n\nexport default Cards;\n","// https://tobiasahlin.com/spinkit/\n\nimport '../css/LoadingSpinner.css';\n\nfunction LoadingSpinner() {\n\treturn (\n\t\t<div className=\"sk-cube-grid\">\n\t\t\t<div className=\"sk-cube sk-cube1\"></div>\n\t\t\t<div className=\"sk-cube sk-cube2\"></div>\n\t\t\t<div className=\"sk-cube sk-cube3\"></div>\n\t\t\t<div className=\"sk-cube sk-cube4\"></div>\n\t\t\t<div className=\"sk-cube sk-cube5\"></div>\n\t\t\t<div className=\"sk-cube sk-cube6\"></div>\n\t\t\t<div className=\"sk-cube sk-cube7\"></div>\n\t\t\t<div className=\"sk-cube sk-cube8\"></div>\n\t\t\t<div className=\"sk-cube sk-cube9\"></div>\n\t\t</div>\n\t);\n}\n\nexport default LoadingSpinner;\n","// https://tobiasahlin.com/spinkit/\n\nimport '../css/ShuffleSpinner.css';\n\nfunction ShuffleSpinner() {\n\treturn (\n\t\t<div className=\"spinner\">\n\t\t\t<div className=\"cube1\"></div>\n\t\t\t<div className=\"cube2\"></div>\n\t\t</div>\n\t);\n}\n\nexport default ShuffleSpinner;\n","import React, { useState, useEffect } from 'react';\nimport {\n\tfetchData,\n\tshuffle,\n\tgetRandomElements,\n\thasDuplicates,\n} from './lib/helpers';\nimport './App.css';\nimport Header from './components/Header';\nimport Scoreboard from './components/Scoreboard';\nimport Cards from './components/Cards';\nimport LoadingSpinner from './components/LoadingSpinner';\nimport ShuffleSpinner from './components/ShuffleSpinner';\n\nfunction App(props) {\n\tconst [pickedPokemons, setPickedPokemons] = useState([]);\n\tconst [selectedCards, setSelectedCards] = useState([]);\n\tconst [isPickedPokemonsShuffling, setIsPickedPokemonsShuffling] = useState(\n\t\tfalse\n\t);\n\tconst [score, setScore] = useState({\n\t\tcurrent: 0,\n\t\tbest: parseInt(localStorage.getItem('bestScore'), 10) || 0,\n\t});\n\tconst [isWinner, setIsWinner] = useState(undefined);\n\n\tfunction resetState() {\n\t\tsetPickedPokemons([]);\n\t\tsetSelectedCards([]);\n\t\tsetIsPickedPokemonsShuffling(false);\n\t\tsetScore((prevScore) => ({\n\t\t\tcurrent: 0,\n\t\t\tbest: parseInt(localStorage.getItem('bestScore'), 10) || prevScore.best,\n\t\t}));\n\t\tsetIsWinner(undefined);\n\t}\n\n\tasync function getCompletePokemonData(pokemonUrl) {\n\t\ttry {\n\t\t\tconst pokemonData = await fetchData(pokemonUrl);\n\t\t\treturn pokemonData;\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n\n\tasync function getPokemonsCompleteData(pokemonUrls) {\n\t\ttry {\n\t\t\tconst completePokemonsData = await Promise.all(\n\t\t\t\tpokemonUrls.map(async (pokemonUrl) => {\n\t\t\t\t\treturn getCompletePokemonData(pokemonUrl);\n\t\t\t\t})\n\t\t\t);\n\t\t\treturn completePokemonsData;\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t}\n\t}\n\n\tfunction processPokemons(pokemons) {\n\t\treturn pokemons.map((pokemon) => {\n\t\t\treturn {\n\t\t\t\tname: pokemon.name,\n\t\t\t\timage:\n\t\t\t\t\tpokemon.sprites.other['official-artwork'].front_default ||\n\t\t\t\t\tpokemon.sprites.front_default ||\n\t\t\t\t\t'https://media.giphy.com/media/12Bpme5pTzGmg8/giphy.gif',\n\t\t\t};\n\t\t});\n\t}\n\n\tasync function pickPokemons() {\n\t\tconst incPokemonsData = await fetchData(\n\t\t\t'https://pokeapi.co/api/v2/pokemon?limit=1118'\n\t\t);\n\t\tconst incRandomPokemonsData = getRandomElements(\n\t\t\tincPokemonsData.results,\n\t\t\t20\n\t\t);\n\t\tconst incRandomPokemonsUrl = incRandomPokemonsData.map((incPokemonData) => {\n\t\t\treturn incPokemonData.url;\n\t\t});\n\t\tconst randomPokemons = await getPokemonsCompleteData(incRandomPokemonsUrl);\n\t\tconst processedPokemons = processPokemons(randomPokemons);\n\t\tsetPickedPokemons(processedPokemons);\n\t}\n\n\tasync function newGame() {\n\t\tresetState();\n\t\tpickPokemons();\n\t}\n\n\tfunction bestScoreText(score) {\n\t\treturn `${score.current === score.best ? ' NEW BEST SCORE!!!' : ''}`;\n\t}\n\n\tfunction handleCardClick(e) {\n\t\tconst target = e.target;\n\t\tconst cardName = target.dataset.name;\n\t\tsetSelectedCards((prevSelectedCards) => [...prevSelectedCards, cardName]);\n\t\tsetPickedPokemons(shuffle(pickedPokemons));\n\t\tsetIsPickedPokemonsShuffling(true);\n\t\tsetTimeout(() => setIsPickedPokemonsShuffling(false), 300);\n\t}\n\n\t// Use effects\n\n\tuseEffect(() => {\n\t\tpickPokemons();\n\t}, []);\n\n\tuseEffect(() => {\n\t\tfunction determineScoreOrIfLoser(selectedCards) {\n\t\t\tif (selectedCards.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst selectedCardsHasDulicates = hasDuplicates(selectedCards);\n\t\t\tif (!selectedCardsHasDulicates) {\n\t\t\t\tsetScore((prevScore) => {\n\t\t\t\t\tconst newScore = prevScore.current + 1;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcurrent: newScore,\n\t\t\t\t\t\tbest: newScore > prevScore.best ? newScore : prevScore.best,\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tsetIsWinner(false);\n\t\t\t}\n\t\t}\n\t\tdetermineScoreOrIfLoser(selectedCards);\n\t}, [selectedCards]);\n\n\tuseEffect(() => {\n\t\tfunction storeBestScoreToLocalStorage(bestScore) {\n\t\t\tlocalStorage.setItem('bestScore', bestScore);\n\t\t}\n\t\tstoreBestScoreToLocalStorage(score.best);\n\t}, [score]);\n\n\tuseEffect(() => {\n\t\tfunction determineIfWinner(score) {\n\t\t\tif (score.current >= 20) {\n\t\t\t\tsetIsWinner(true);\n\t\t\t}\n\t\t}\n\t\tdetermineIfWinner(score);\n\t}, [score]);\n\n\tuseEffect(() => {\n\t\tfunction messageAndDetermineIfNewGame(selectedCards, score, isWinner) {\n\t\t\tif (selectedCards.length === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (typeof isWinner === 'boolean') {\n\t\t\t\talert(\n\t\t\t\t\t`You ${isWinner ? 'win' : 'lose'}, your score is ${\n\t\t\t\t\t\tscore.current\n\t\t\t\t\t} ${bestScoreText(score)}.`\n\t\t\t\t);\n\t\t\t\tnewGame();\n\t\t\t}\n\t\t}\n\t\tmessageAndDetermineIfNewGame(selectedCards, score, isWinner);\n\t}, [selectedCards, score, isWinner]);\n\n\treturn (\n\t\t<main>\n\t\t\t<div\n\t\t\t\tclassName=\"container \n\t\t\t\t\ttop-part\n\t\t\t\t\talign-items-center \n\t\t\t\t\tpy-2\n\t\t\t\t\tmy-4\"\n\t\t\t>\n\t\t\t\t<Header classes={'mb-3 mb-md-0'} />\n\t\t\t\t<Scoreboard score={score} />\n\t\t\t</div>\n\t\t\t{pickedPokemons.length === 0 ? (\n\t\t\t\t<LoadingSpinner />\n\t\t\t) : isPickedPokemonsShuffling ? (\n\t\t\t\t<ShuffleSpinner />\n\t\t\t) : (\n\t\t\t\t<Cards items={pickedPokemons} onCardClick={handleCardClick} />\n\t\t\t)}\n\t\t</main>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}